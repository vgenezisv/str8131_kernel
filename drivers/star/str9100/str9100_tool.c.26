/*******************************************************************************
 *
 *  Copyright(c) 2006 Star Semiconductor Corporation, All rights reserved.
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 *  more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59
 *  Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *  The full GNU General Public License is included in this distribution in the
 *  file called LICENSE.
 *
 *  Contact Information:
 *  Technology Support <tech@starsemi.com>
 *  Star Semiconductor 4F, No.1, Chin-Shan 8th St, Hsin-Chu,300 Taiwan, R.O.C
 *
 ******************************************************************************/

#include <linux/proc_fs.h>
#include <linux/delay.h>

//#include <asm/arch/star_tool.h>
#include <asm/hardware.h>
#include <asm/io.h>
#include <asm/system.h>

#define CONFIG_GET_FLASH_VAR

#ifdef CONFIG_GET_FLASH_VAR
// add by descent 2006/07/20
/* Add for read MAC from FLASH. */
#ifndef __ARM_BE__
#define B0(h)	((h) & 0xFF)
#define B1(h)	(((h) >> 8) & 0xFF)
#else
#define B0(h)	(((h) >> 8) & 0xFF)
#define B1(h)	((h) & 0xFF) 
#endif

void copy_from_flash(unsigned long from, void *to, ssize_t len)
{
	int i;
	u8 *dest = (u8*)to;
	u16 data;
	u8 *remap = ioremap(FLASH_BASE_ADDR, FLASH_SIZE);
	volatile u16 *src = (volatile u16 *)(remap + from);

	for (i = 0; i < (len / 2); i++) {
		data = src[i];
		dest[i * 2] = B0(data);
		dest[i * 2 + 1] = B1(data);
	}

	if (len & 1)
		dest[len - 1] = B0(src[i]);

	iounmap(remap);
}

char *get_flash_env(const char *env_name)
{
	const int ENV_SIZE = 0x8000;
	unsigned long from = 0x20000;

	u8 *remap = ioremap(FLASH_BASE_ADDR, FLASH_SIZE);
	volatile u8 *src = (volatile u8 *)(remap + from);

	char *str_p = env_name;
	char *beg_p = src;
	char *p;

	while (1) {
		p = strstr(beg_p, str_p);
		if (p) { // found
			char *asign_p = strchr(p, '=');
			if (asign_p) {
				iounmap(remap);
				return asign_p + 1;
			} else
				break; // should not this case
		} else {
			++beg_p;
		}
		if (p > (src + ENV_SIZE)) {
			break;
		}
	}
        iounmap(remap);
	return 0; // not found
}
#endif

/*
 * MXIC's flash manufacture ID
 */
#define MX_MANUFACT			0x00C200C2 /* MXIC manuf. ID in D23..D16, D7..D0 */
#define MXIC_MANUFACTURE_ID		0x00C20000

/*
 * MXIC's flash device ID
 */
#define MXIC_DEVICE_ID_MX29LV320B	0x000000A8
#define MX_ID_LV640BB			0x22CB22CB /* 29LV640BB by Macronix, AMD compatible */
#define MX_ID_LV640BT			0x22C922C9 /* 29LV640BT by Macronix, AMD compatible */

const char *get_flash_type(void)
{
	u8 *remap = ioremap(FLASH_BASE_ADDR, FLASH_SIZE);
	volatile u16 *saddr = (volatile u16 *)remap;
	u16 mid;
	u16 did;
	int name_index = 0;
	const char *flash_name[] = {
		0,
		"EON_EN29LV640HL(8MB)",
		"MXIC_MX29LV640BT(8MB)"
	};

	/* Write auto select command: read Manufacturer ID */
	saddr[0x555] = 0xAA;
	saddr[0x2AA] = 0x55;
	saddr[0x555] = 0x90;

	mid = saddr[0];
	did = saddr[1];

	if (((mid & 0xffff) == 0x007f) && ((did & 0xFFFF) == 0x227e) ) // "EON_EN29LV640HL(8MB)"
		name_index=1;
	if (((mid & 0xffff) == 0x00c2) && ((did & 0xFFFF) == 0x22c9) ) // "MXIC_MX29LV640BT(8MB)"
		name_index=2;

	/* reset to read mode */
	saddr[0] = 0xF0; /* reset the bank */
	udelay(1000);

	iounmap(remap);

	return flash_name[name_index];
}

