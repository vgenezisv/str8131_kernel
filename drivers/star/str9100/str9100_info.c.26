/*******************************************************************************
 *
 *  Copyright(c) 2006 Star Semiconductor Corporation, All rights reserved.
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 *  more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  this program; if not, write to the Free Software Foundation, Inc., 59
 *  Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *  The full GNU General Public License is included in this distribution in the
 *  file called LICENSE.
 *
 *  Contact Information:
 *  Technology Support <tech@starsemi.com>
 *  Star Semiconductor 4F, No.1, Chin-Shan 8th St, Hsin-Chu,300 Taiwan, R.O.C
 *
 ******************************************************************************/

#include <linux/stddef.h>
#include <linux/config.h>
#include <linux/module.h>
#include <linux/types.h>
#include <asm/byteorder.h>
#include <linux/init.h>
#include <linux/mm.h>
#include <linux/errno.h>
#include <linux/kernel.h>
#include <linux/slab.h>
#include <linux/vmalloc.h>
#include <linux/string.h>
#include <linux/proc_fs.h>
#include <asm/arch/hardware.h>
#include <linux/kdev_t.h>
#include <linux/miscdevice.h>
#include <asm/uaccess.h>

#include <linux/str9100/str9100_tool.h>

#include <asm/hardware.h>
#include <asm/io.h>
#include <asm/system.h>

static const char *cpu_str[] = {
"175",
"200",
"225",
"250"
};

static const char *v18_str[] = {
"1.537",
"1.594",
"1.655",
"1.721",
"1.793",
"1.871",
"1.956",
"2.049"
};

static const char *pciclk_str[] = {
"33",
"66",
"-"
};

static const char *dram_str[] = {
"16",
"32",
"64",
"-"
};

typedef struct STR9100_INFO {
	u32 cpu;
	u32 v18regular;
	u32 pciclk;
	u32 dram;
} STR9100_INFO;

static STR9100_INFO str9100_info;
static struct proc_dir_entry *str9100_info_proc_entry;

static int get_system_info(void)
{
	u32 temp;
	temp = (PWRMGT_RESET_LATCH_CONFIGURATION_REG >> 6) & 0x3;
	str9100_info.cpu = temp;

	temp = (PWRMGT_REGULATOR_CONTROL_REG >> 11) & 0x7;
	temp = ((temp >> 11)&0x7);
	str9100_info.v18regular = temp;

#if defined(CONFIG_STR9100_PCI66M)
	str9100_info.pciclk = 1;
#elif defined(CONFIG_STR9100_PCI33M)
	str9100_info.pciclk = 0;
#else
	str9100_info.pciclk = 2;
#endif

#if defined(CONFIG_STR9100_DRAM_64M)
	str9100_info.dram = 2;
#elif defined(CONFIG_STR9100_DRAM_32M)
	str9100_info.dram = 1;
#elif defined(CONFIG_STR9100_DRAM_16M)
	str9100_info.dram = 0;
#else
	str9100_info.dram = 3;
#endif

	return 0;
}

static int str9100_info_read_proc(char *page, char **start,  off_t off, int count, int *eof, void *data)
{
	int num = 0;

	// for human readable
	num += sprintf(page+num, "--- CPU \n");
	num += sprintf(page+num, "CPU Clock: STR9100 %sMhz\n", cpu_str[str9100_info.cpu]);
	num += sprintf(page+num, "1.8V Regulator Regulated vdd Output : %sv \n", v18_str[str9100_info.v18regular]);
	num += sprintf(page+num, "--- Device \n");
	num += sprintf(page+num, "PCI Clock: %sMhz\n", pciclk_str[str9100_info.pciclk]);
	num += sprintf(page+num, "--- Memory \n");
	num += sprintf(page+num, "DRAM Size: %sMBytes\n", dram_str[str9100_info.dram]);
#ifdef CONFIG_CPU_ISPAD_ENABLE
	num += sprintf(page+num, "I-Scratchpad enable\n");
#else
	num += sprintf(page+num, "I-Scratchpad disable\n");
#endif
	num += sprintf(page+num, "flash type: %s\n", get_flash_type());

	return num;
}

static int str9100_info_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
	return 0;
}

static int str9100_info_ioctl(struct inode *inode, struct file *file,
	unsigned int cmd, unsigned long arg)
{
	int count,len;
	char temp[STR9100_INFO_SIZE];

	switch (cmd) {
	case STR9100_INFO_IOCGETD:    
		printk("STR9100_INFO_IOCGETD \n");
		copy_to_user((unsigned char *)arg, (unsigned char *)&str9100_info, sizeof(str9100_info));
		break;

	case STR9100_INFO_IOCSETD:
		printk("STR9100_INFO_IOCSETD \n");
		//if (copy_from_user(temp, (unsigned char *)arg, count))     
			//return -EFAULT;
		break;

	case STR9100_INFO_IOCPUCLK:
		len = strlen(cpu_str[str9100_info.cpu]);
		strcpy(temp,cpu_str[str9100_info.cpu]);
		copy_to_user((unsigned char *)arg, temp, len + 1);
		break;

	case STR9100_INFO_IOV18:
		len = strlen(v18_str[str9100_info.v18regular]);
		strcpy(temp,v18_str[str9100_info.v18regular]);
		copy_to_user((unsigned char *)arg, temp, len + 1);
		break;

	case STR9100_INFO_IOPCICLK:
		len = strlen(pciclk_str[str9100_info.pciclk]);
		strcpy(temp,pciclk_str[str9100_info.pciclk]);
		copy_to_user((unsigned char *)arg, temp, len + 1);
		break;

	case STR9100_INFO_IODRAMSZ:
		len = strlen(dram_str[str9100_info.dram]);
		strcpy(temp,dram_str[str9100_info.dram]);
		copy_to_user((unsigned char *)arg, temp, len + 1);
		break;

	default:
		return -EINVAL;
	}

	return 0;
}

static int str9100_info_open(struct inode *inode, struct file *file)
{
	unsigned int minor = MINOR(inode->i_rdev);
	if (minor != STR9100_INFO_MINOR)
		return -ENODEV;

#ifdef MODULE
	MOD_INC_USE_COUNT;
#endif

	return 0;
}


static int str9100_info_release(struct inode *inode, struct file *file)
{
#ifdef MODULE
	MOD_DEC_USE_COUNT;
#endif

	return 0;
}


/*
 * ioctl interface
 */
static struct file_operations str9100_info_fops =
{
	owner:		THIS_MODULE,
	ioctl:		str9100_info_ioctl,
	open:		str9100_info_open,
	release:	str9100_info_release,
};

/* STR9100_MINOR in include/linux/miscdevice.h */
static struct miscdevice str9100_info_miscdev =
{
	STR9100_INFO_MINOR,
	"str9100_info",
	&str9100_info_fops
};

static int __init str9100_info_init(void)
{
	get_system_info();

	str9100_info_proc_entry = create_proc_entry("str9100/info", S_IFREG | S_IRUGO, NULL);
	if (str9100_info_proc_entry) {
		str9100_info_proc_entry->read_proc = str9100_info_read_proc;
		str9100_info_proc_entry->write_proc = str9100_info_write_proc;
	}

	misc_register(&str9100_info_miscdev);

	return 1;
}

static void __exit str9100_info_exit(void)
{
	misc_deregister(&str9100_info_miscdev);
	remove_proc_entry("str9100/info", NULL);
}

module_init(str9100_info_init);
module_exit(str9100_info_exit);

